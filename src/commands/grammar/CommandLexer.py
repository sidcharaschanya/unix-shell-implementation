# Generated from CommandLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,111,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
        4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,
        2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,
        7,18,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,4,5,54,8,5,11,5,
        12,5,55,1,6,4,6,59,8,6,11,6,12,6,60,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,4,12,81,8,
        12,11,12,12,12,82,1,13,1,13,1,13,1,13,1,14,4,14,90,8,14,11,14,12,
        14,91,1,15,1,15,1,15,1,15,1,16,4,16,99,8,16,11,16,12,16,100,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,0,0,19,4,0,6,0,8,0,10,2,
        12,3,14,4,16,5,18,6,20,7,22,8,24,0,26,9,28,10,30,11,32,12,34,13,
        36,14,38,15,40,0,4,0,1,2,3,5,2,0,9,9,32,32,8,0,9,10,32,32,34,34,
        39,39,59,60,62,62,96,96,124,124,2,0,10,10,39,39,2,0,10,10,96,96,
        3,0,10,10,34,34,96,96,109,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,
        0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,
        0,26,1,0,0,0,1,28,1,0,0,0,1,30,1,0,0,0,2,32,1,0,0,0,2,34,1,0,0,0,
        3,36,1,0,0,0,3,38,1,0,0,0,3,40,1,0,0,0,4,42,1,0,0,0,6,44,1,0,0,0,
        8,46,1,0,0,0,10,48,1,0,0,0,12,50,1,0,0,0,14,53,1,0,0,0,16,58,1,0,
        0,0,18,62,1,0,0,0,20,64,1,0,0,0,22,66,1,0,0,0,24,70,1,0,0,0,26,75,
        1,0,0,0,28,80,1,0,0,0,30,84,1,0,0,0,32,89,1,0,0,0,34,93,1,0,0,0,
        36,98,1,0,0,0,38,102,1,0,0,0,40,106,1,0,0,0,42,43,5,39,0,0,43,5,
        1,0,0,0,44,45,5,96,0,0,45,7,1,0,0,0,46,47,5,34,0,0,47,9,1,0,0,0,
        48,49,5,59,0,0,49,11,1,0,0,0,50,51,5,124,0,0,51,13,1,0,0,0,52,54,
        7,0,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,
        56,15,1,0,0,0,57,59,8,1,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,
        0,0,0,60,61,1,0,0,0,61,17,1,0,0,0,62,63,5,60,0,0,63,19,1,0,0,0,64,
        65,5,62,0,0,65,21,1,0,0,0,66,67,3,4,0,0,67,68,1,0,0,0,68,69,6,9,
        0,0,69,23,1,0,0,0,70,71,3,6,1,0,71,72,1,0,0,0,72,73,6,10,1,0,73,
        74,6,10,2,0,74,25,1,0,0,0,75,76,3,8,2,0,76,77,1,0,0,0,77,78,6,11,
        3,0,78,27,1,0,0,0,79,81,8,2,0,0,80,79,1,0,0,0,81,82,1,0,0,0,82,80,
        1,0,0,0,82,83,1,0,0,0,83,29,1,0,0,0,84,85,3,4,0,0,85,86,1,0,0,0,
        86,87,6,13,4,0,87,31,1,0,0,0,88,90,8,3,0,0,89,88,1,0,0,0,90,91,1,
        0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,33,1,0,0,0,93,94,3,6,1,0,94,
        95,1,0,0,0,95,96,6,15,4,0,96,35,1,0,0,0,97,99,8,4,0,0,98,97,1,0,
        0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,37,1,0,0,0,
        102,103,3,8,2,0,103,104,1,0,0,0,104,105,6,17,4,0,105,39,1,0,0,0,
        106,107,3,6,1,0,107,108,1,0,0,0,108,109,6,18,1,0,109,110,6,18,2,
        0,110,41,1,0,0,0,9,0,1,2,3,55,60,82,91,100,5,5,1,0,7,1,0,5,2,0,5,
        3,0,4,0,0
    ]

class CommandLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SINGLE_QUOTED = 1
    BACK_QUOTED = 2
    DOUBLE_QUOTED = 3

    BQ_START = 1
    SEQ = 2
    PIPE = 3
    WS = 4
    UNQUOTED = 5
    LT = 6
    GT = 7
    SQ_START = 8
    DQ_START = 9
    SQ_CONTENT = 10
    SQ_END = 11
    BQ_CONTENT = 12
    BQ_END = 13
    DQ_CONTENT = 14
    DQ_END = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "SINGLE_QUOTED", "BACK_QUOTED", "DOUBLE_QUOTED" ]

    literalNames = [ "<INVALID>",
            "';'", "'|'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "BQ_START", "SEQ", "PIPE", "WS", "UNQUOTED", "LT", "GT", "SQ_START", 
            "DQ_START", "SQ_CONTENT", "SQ_END", "BQ_CONTENT", "BQ_END", 
            "DQ_CONTENT", "DQ_END" ]

    ruleNames = [ "SQ_CHAR", "BQ_CHAR", "DQ_CHAR", "SEQ", "PIPE", "WS", 
                  "UNQUOTED", "LT", "GT", "SQ_START", "BQ", "DQ_START", 
                  "SQ_CONTENT", "SQ_END", "BQ_CONTENT", "BQ_END", "DQ_CONTENT", 
                  "DQ_END", "BQ_IN_DQ" ]

    grammarFileName = "CommandLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


